# This is a basic workflow to help you get started with Actions

name: Deploy to YA vm

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [created]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CR_HOST: cr.yandex
  FRONT_CR_IMAGE: front
  BACKEND_CR_IMAGE: backend
  VM_NAME: ${{ secrets.VM_NAME }}
  CR_REPOSITORY: crpqfal48gn8a3qd221i
  FRONT_CR_URL: $CR_HOST/$CR_REPOSITORY/$FRONT_CR_IMAGE
  BACKEND_CR_URL: $CR_HOST/$CR_REPOSITORY/$BACKEND_CR_IMAGE

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # Runs a single command using the runners shell
      - name: Yandex Cloud CR "Login" Action for GitHub Actions
        uses: yc-actions/yc-cr-login@v1
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}

      - name: Build, tag, and push front image to Yandex Cloud Container Registry
        run: |
          docker build -f apps/frontend/Dockerfile -t ${{ env.FRONT_CR_URL}}:${{ github.sha }} .
          docker push ${{ env.FRONT_CR_URL}}:${{ github.sha }}

      - name: Build, tag, and push backend image to Yandex Cloud Container Registry
        run: |
          docker build -f apps/api/Dockerfile -t ${{ env.BACKEND_CR_URL}}:${{ github.sha }} .
          docker push ${{ env.BACKEND_CR_URL}}:${{ github.sha }}
  deploy:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Deploy COI VM
        id: deploy-coi
        uses: yc-actions/yc-coi-deploy@v1
        env:
          ENV_VARIABLE: ${{ secrets.ENV_VARIABLE }}
          NEXT_PUBLIC_ENV_VARIABLE: ${{ secrets.NEXT_PUBLIC_ENV_VARIABLE }}
          ANALYZE: ${{ secrets.ANALYZE }}
          NEXT_PUBLIC_GOOGLE_TAG_MANAGER_ID: ${{ secrets.NEXT_PUBLIC_GOOGLE_TAG_MANAGER_ID }}
          BACKEND_IMAGE_URL: ${{ env.CR_HOST }}/${{ env.CR_REPOSITORY }}/${{ env.BACKEND_CR_IMAGE }}:${{ github.sha }}
          FRONT_IMAGE_URL: ${{ env.CR_HOST }}/${{ env.CR_REPOSITORY }}/${{ env.FRONT_CR_IMAGE }}:${{ github.sha }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          TRAEFIK_DASHBOARD_LOGIN: ${{ secrets.TRAEFIK_DASHBOARD_LOGIN }}
          TRAEFIK_DASHBOARD_PASSWORD: ${{ secrets.TRAEFIK_DASHBOARD_PASSWORD }}
          BACKEND_HOST: ${{ secrets.BACKEND_HOST }}
          FRONT_HOST: ${{ secrets.FRONT_HOST }}
          TRAEFIK_HOST: ${{ secrets.TRAEFIK_HOST }}
          APP_KEYS: ${{ secrets.APP_KEYS }}
          API_TOKEN_SALT: ${{ secrets.API_TOKEN_SALT }}
          ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          STRAPI_PLUGIN_I18N_INIT_LOCALE_CODE: ${{ secrets.STRAPI_PLUGIN_I18N_INIT_LOCALE_CODE }}
          DATABASE_CLIENT: ${{ secrets.DATABASE_CLIENT }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_ACCESS_SECRET: ${{ secrets.AWS_ACCESS_SECRET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          folder-id: b1gke16sajj09en730l2
          vm-name: ${{ env.VM_NAME}}
          vm-service-account-id: ajeeshqgd7ku5q8128ju
          vm-cores: 2
          vm-memory: 2 GB
          vm-core-fraction: 50
          vm-zone-id: ru-central1-b
          vm-subnet-id: e2legjppt5nu2h203b1j
          user-data-path: './user-data.yml'
          docker-compose-path: './docker-compose.yml'
