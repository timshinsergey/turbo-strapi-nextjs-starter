version: '3.8'

services:
  strapi:
    image: {{ env.BACKEND_IMAGE_URL }}
    container_name: strapi
    restart: unless-stopped
    networks:
      - strapi
    depends_on:
      - strapiDB
    environment:
      DATABASE_CLIENT: {{ env.DATABASE_CLIENT }}
      DATABASE_HOST: strapiDB
      DATABASE_NAME: {{ env.DATABASE_NAME }}
      DATABASE_USERNAME: {{ env.DATABASE_USERNAME }}
      DATABASE_PORT: {{ env.DATABASE_PORT }}
      DATABASE_PASSWORD: {{ env.DATABASE_PASSWORD }}
      APP_KEYS: {{ env.APP_KEYS }}
      API_TOKEN_SALT: {{ env.API_TOKEN_SALT }}
      JWT_SECRET: {{ env.JWT_SECRET }}
      ADMIN_JWT_SECRET: {{ env.ADMIN_JWT_SECRET }}
      AWS_ACCESS_KEY_ID: {{ env.AWS_ACCESS_KEY_ID }}
      AWS_ACCESS_SECRET: {{ env.AWS_ACCESS_SECRET }}
      AWS_REGION: {{ env.AWS_REGION }}
      AWS_BUCKET: {{ env.AWS_BUCKET }}
      STRAPI_PLUGIN_I18N_INIT_LOCALE_CODE: {{ env.STRAPI_PLUGIN_I18N_INIT_LOCALE_CODE }}
      NODE_ENV: {{ env.NODE_ENV }}
    # for domain connection
    labels:
      traefik.enable: true
      traefik.http.routers.strapi.rule: Host(`www.api.{{ env.DOMAIN }}`)
      "traefik.http.routers.strapi.tls.domains[0].main": api.{{ env.DOMAIN }}
      "traefik.http.routers.strapi.tls.domains[0].sans": www.api.{{ env.DOMAIN }}
      traefik.http.services.strapi.loadbalancer.server.port: 1337
  strapiDB:
    image: mysql:8
    container_name: strapiDB
    restart: unless-stopped
    networks:
      - strapi
    volumes:
      - strapi-data:/var/lib/mysql
      #- ./data:/var/lib/postgresql/data/ # if you want to use a bind folder
    ports:
      - 3306:3306
    environment:
      MYSQL_USER: {{ env.DATABASE_USERNAME }}
      MYSQL_ROOT_PASSWORD: {{ env.DATABASE_PASSWORD }}
      MYSQL_PASSWORD: {{ env.DATABASE_PASSWORD }}
      MYSQL_DATABASE: {{ env.DATABASE_NAME }}
    command:
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
  front:
    image: {{ env.FRONT_IMAGE_URL }}
    container_name: front
    restart: unless-stopped
    networks:
      - strapi
    environment:
      ENV_VARIABLE: {{ env.ENV_VARIABLE }}
      NEXT_PUBLIC_ENV_VARIABLE: {{ env.NEXT_PUBLIC_ENV_VARIABLE }}
      ANALYZE: {{ env.ANALYZE }}
      NEXT_PUBLIC_GOOGLE_TAG_MANAGER_ID: {{ env.NEXT_PUBLIC_GOOGLE_TAG_MANAGER_ID }}
    # for domain connection
    labels:
      traefik.enable: true
      traefik.http.routers.frontend.rule: Host(`www.{{ env.DOMAIN }}`)
      "traefik.http.routers.frontend.tls.domains[0].main": www.{{ env.DOMAIN }}
      "traefik.http.routers.frontend.tls.domains[0].sans": {{ env.DOMAIN }}
      traefik.http.services.frontend.loadbalancer.server.port: 3000
  traefik:
    image: traefik:v2.9.4
    container_name: traefik
    restart: unless-stopped
    networks:
      - strapi
    volumes:
      - /letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - 80:80
      - 443:443
    command:
      - --api.dashboard=true
      - --log.level=warning
      - --accesslog.format=json
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --certificatesresolvers.le.acme.email={{ env.CERTS_EMAIL }}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.myresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.tls.certResolver=le
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
    labels:
      traefik.enable: true
      traefik.http.routers.unmatchedwww.rule: HostRegexp(`{name:^www\..*}`)
      traefik.http.routers.unmatchedwww.service: noop@internal
      traefik.http.routers.unmatchedwww.priority: 2
      traefik.http.routers.matchlast.rule: PathPrefix(`/`)
      traefik.http.routers.matchlast.priority: 1
      traefik.http.routers.matchlast.middlewares: addwww
      traefik.http.middlewares.addwww.redirectregex.regex: ^https://(?:www\.)?(.*)
      traefik.http.middlewares.addwww.redirectregex.replacement: https://www.$${1}
      traefik.http.routers.dashboard.rule: Host(`www.traefik.{{ env.DOMAIN }}`)
      "traefik.http.routers.dashboard.tls.domains[0].main": traefik.localhost
      "traefik.http.routers.dashboard.tls.domains[0].sans": www.traefik.localhost
      traefik.http.routers.dashboard.service: api@internal
      traefik.http.routers.dashboard.middlewares: auth
      # Note: all dollar signs in the hash need to be doubled for escaping.
      # Passwords must be hashed using BCrypt.
      traefik.http.middlewares.auth.basicauth.users: '{{ env.TRAEFIK_DASHBOARD_LOGIN }}:{{ env.TRAEFIK_DASHBOARD_PASSWORD }}'

# Add more containers below (nginx, postgres, etc.)
# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
volumes:
  letsencrypt:
  strapi-data:

networks:
  strapi:
    driver: bridge
